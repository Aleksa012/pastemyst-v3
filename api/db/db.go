// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPasteStmt, err = db.PrepareContext(ctx, createPaste); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePaste: %w", err)
	}
	if q.createPastyStmt, err = db.PrepareContext(ctx, createPasty); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePasty: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteExpiredPastesStmt, err = db.PrepareContext(ctx, deleteExpiredPastes); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredPastes: %w", err)
	}
	if q.deletePasteStmt, err = db.PrepareContext(ctx, deletePaste); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePaste: %w", err)
	}
	if q.existsPasteStmt, err = db.PrepareContext(ctx, existsPaste); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsPaste: %w", err)
	}
	if q.existsUserByIdStmt, err = db.PrepareContext(ctx, existsUserById); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserById: %w", err)
	}
	if q.existsUserByProviderStmt, err = db.PrepareContext(ctx, existsUserByProvider); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByProvider: %w", err)
	}
	if q.existsUserByUsernameStmt, err = db.PrepareContext(ctx, existsUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByUsername: %w", err)
	}
	if q.getPasteStmt, err = db.PrepareContext(ctx, getPaste); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaste: %w", err)
	}
	if q.getPasteCountStmt, err = db.PrepareContext(ctx, getPasteCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetPasteCount: %w", err)
	}
	if q.getPastePastiesStmt, err = db.PrepareContext(ctx, getPastePasties); err != nil {
		return nil, fmt.Errorf("error preparing query GetPastePasties: %w", err)
	}
	if q.getPasteStarCountStmt, err = db.PrepareContext(ctx, getPasteStarCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetPasteStarCount: %w", err)
	}
	if q.getUserAllPastesStmt, err = db.PrepareContext(ctx, getUserAllPastes); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAllPastes: %w", err)
	}
	if q.getUserAllPastesCountStmt, err = db.PrepareContext(ctx, getUserAllPastesCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAllPastesCount: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByProviderStmt, err = db.PrepareContext(ctx, getUserByProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByProvider: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserPublicPastesStmt, err = db.PrepareContext(ctx, getUserPublicPastes); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPublicPastes: %w", err)
	}
	if q.getUserPublicPastesCountStmt, err = db.PrepareContext(ctx, getUserPublicPastesCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPublicPastesCount: %w", err)
	}
	if q.isPasteStarredStmt, err = db.PrepareContext(ctx, isPasteStarred); err != nil {
		return nil, fmt.Errorf("error preparing query IsPasteStarred: %w", err)
	}
	if q.starPasteStmt, err = db.PrepareContext(ctx, starPaste); err != nil {
		return nil, fmt.Errorf("error preparing query StarPaste: %w", err)
	}
	if q.unstarPasteStmt, err = db.PrepareContext(ctx, unstarPaste); err != nil {
		return nil, fmt.Errorf("error preparing query UnstarPaste: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPasteStmt != nil {
		if cerr := q.createPasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPasteStmt: %w", cerr)
		}
	}
	if q.createPastyStmt != nil {
		if cerr := q.createPastyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPastyStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteExpiredPastesStmt != nil {
		if cerr := q.deleteExpiredPastesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredPastesStmt: %w", cerr)
		}
	}
	if q.deletePasteStmt != nil {
		if cerr := q.deletePasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePasteStmt: %w", cerr)
		}
	}
	if q.existsPasteStmt != nil {
		if cerr := q.existsPasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsPasteStmt: %w", cerr)
		}
	}
	if q.existsUserByIdStmt != nil {
		if cerr := q.existsUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByIdStmt: %w", cerr)
		}
	}
	if q.existsUserByProviderStmt != nil {
		if cerr := q.existsUserByProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByProviderStmt: %w", cerr)
		}
	}
	if q.existsUserByUsernameStmt != nil {
		if cerr := q.existsUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getPasteStmt != nil {
		if cerr := q.getPasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPasteStmt: %w", cerr)
		}
	}
	if q.getPasteCountStmt != nil {
		if cerr := q.getPasteCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPasteCountStmt: %w", cerr)
		}
	}
	if q.getPastePastiesStmt != nil {
		if cerr := q.getPastePastiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPastePastiesStmt: %w", cerr)
		}
	}
	if q.getPasteStarCountStmt != nil {
		if cerr := q.getPasteStarCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPasteStarCountStmt: %w", cerr)
		}
	}
	if q.getUserAllPastesStmt != nil {
		if cerr := q.getUserAllPastesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAllPastesStmt: %w", cerr)
		}
	}
	if q.getUserAllPastesCountStmt != nil {
		if cerr := q.getUserAllPastesCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAllPastesCountStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByProviderStmt != nil {
		if cerr := q.getUserByProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByProviderStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserPublicPastesStmt != nil {
		if cerr := q.getUserPublicPastesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPublicPastesStmt: %w", cerr)
		}
	}
	if q.getUserPublicPastesCountStmt != nil {
		if cerr := q.getUserPublicPastesCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPublicPastesCountStmt: %w", cerr)
		}
	}
	if q.isPasteStarredStmt != nil {
		if cerr := q.isPasteStarredStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isPasteStarredStmt: %w", cerr)
		}
	}
	if q.starPasteStmt != nil {
		if cerr := q.starPasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing starPasteStmt: %w", cerr)
		}
	}
	if q.unstarPasteStmt != nil {
		if cerr := q.unstarPasteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unstarPasteStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createPasteStmt              *sql.Stmt
	createPastyStmt              *sql.Stmt
	createUserStmt               *sql.Stmt
	deleteExpiredPastesStmt      *sql.Stmt
	deletePasteStmt              *sql.Stmt
	existsPasteStmt              *sql.Stmt
	existsUserByIdStmt           *sql.Stmt
	existsUserByProviderStmt     *sql.Stmt
	existsUserByUsernameStmt     *sql.Stmt
	getPasteStmt                 *sql.Stmt
	getPasteCountStmt            *sql.Stmt
	getPastePastiesStmt          *sql.Stmt
	getPasteStarCountStmt        *sql.Stmt
	getUserAllPastesStmt         *sql.Stmt
	getUserAllPastesCountStmt    *sql.Stmt
	getUserByIdStmt              *sql.Stmt
	getUserByProviderStmt        *sql.Stmt
	getUserByUsernameStmt        *sql.Stmt
	getUserPublicPastesStmt      *sql.Stmt
	getUserPublicPastesCountStmt *sql.Stmt
	isPasteStarredStmt           *sql.Stmt
	starPasteStmt                *sql.Stmt
	unstarPasteStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createPasteStmt:              q.createPasteStmt,
		createPastyStmt:              q.createPastyStmt,
		createUserStmt:               q.createUserStmt,
		deleteExpiredPastesStmt:      q.deleteExpiredPastesStmt,
		deletePasteStmt:              q.deletePasteStmt,
		existsPasteStmt:              q.existsPasteStmt,
		existsUserByIdStmt:           q.existsUserByIdStmt,
		existsUserByProviderStmt:     q.existsUserByProviderStmt,
		existsUserByUsernameStmt:     q.existsUserByUsernameStmt,
		getPasteStmt:                 q.getPasteStmt,
		getPasteCountStmt:            q.getPasteCountStmt,
		getPastePastiesStmt:          q.getPastePastiesStmt,
		getPasteStarCountStmt:        q.getPasteStarCountStmt,
		getUserAllPastesStmt:         q.getUserAllPastesStmt,
		getUserAllPastesCountStmt:    q.getUserAllPastesCountStmt,
		getUserByIdStmt:              q.getUserByIdStmt,
		getUserByProviderStmt:        q.getUserByProviderStmt,
		getUserByUsernameStmt:        q.getUserByUsernameStmt,
		getUserPublicPastesStmt:      q.getUserPublicPastesStmt,
		getUserPublicPastesCountStmt: q.getUserPublicPastesCountStmt,
		isPasteStarredStmt:           q.isPasteStarredStmt,
		starPasteStmt:                q.starPasteStmt,
		unstarPasteStmt:              q.unstarPasteStmt,
	}
}
